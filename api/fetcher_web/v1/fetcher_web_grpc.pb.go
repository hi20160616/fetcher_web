// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NewsFetcherClient is the client API for NewsFetcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsFetcherClient interface {
	ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ListArticlesResponse, error)
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleResponse, error)
	SearchArticles(ctx context.Context, in *SearchArticlesRequest, opts ...grpc.CallOption) (*SearchArticlesResponse, error)
}

type newsFetcherClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsFetcherClient(cc grpc.ClientConnInterface) NewsFetcherClient {
	return &newsFetcherClient{cc}
}

func (c *newsFetcherClient) ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ListArticlesResponse, error) {
	out := new(ListArticlesResponse)
	err := c.cc.Invoke(ctx, "/fetcher_web.v1.NewsFetcher/ListArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsFetcherClient) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleResponse, error) {
	out := new(GetArticleResponse)
	err := c.cc.Invoke(ctx, "/fetcher_web.v1.NewsFetcher/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsFetcherClient) SearchArticles(ctx context.Context, in *SearchArticlesRequest, opts ...grpc.CallOption) (*SearchArticlesResponse, error) {
	out := new(SearchArticlesResponse)
	err := c.cc.Invoke(ctx, "/fetcher_web.v1.NewsFetcher/SearchArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsFetcherServer is the server API for NewsFetcher service.
// All implementations must embed UnimplementedNewsFetcherServer
// for forward compatibility
type NewsFetcherServer interface {
	ListArticles(context.Context, *ListArticlesRequest) (*ListArticlesResponse, error)
	GetArticle(context.Context, *GetArticleRequest) (*GetArticleResponse, error)
	SearchArticles(context.Context, *SearchArticlesRequest) (*SearchArticlesResponse, error)
	mustEmbedUnimplementedNewsFetcherServer()
}

// UnimplementedNewsFetcherServer must be embedded to have forward compatible implementations.
type UnimplementedNewsFetcherServer struct {
}

func (UnimplementedNewsFetcherServer) ListArticles(context.Context, *ListArticlesRequest) (*ListArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (UnimplementedNewsFetcherServer) GetArticle(context.Context, *GetArticleRequest) (*GetArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedNewsFetcherServer) SearchArticles(context.Context, *SearchArticlesRequest) (*SearchArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArticles not implemented")
}
func (UnimplementedNewsFetcherServer) mustEmbedUnimplementedNewsFetcherServer() {}

// UnsafeNewsFetcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsFetcherServer will
// result in compilation errors.
type UnsafeNewsFetcherServer interface {
	mustEmbedUnimplementedNewsFetcherServer()
}

func RegisterNewsFetcherServer(s grpc.ServiceRegistrar, srv NewsFetcherServer) {
	s.RegisterService(&NewsFetcher_ServiceDesc, srv)
}

func _NewsFetcher_ListArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsFetcherServer).ListArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fetcher_web.v1.NewsFetcher/ListArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsFetcherServer).ListArticles(ctx, req.(*ListArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsFetcher_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsFetcherServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fetcher_web.v1.NewsFetcher/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsFetcherServer).GetArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsFetcher_SearchArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsFetcherServer).SearchArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fetcher_web.v1.NewsFetcher/SearchArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsFetcherServer).SearchArticles(ctx, req.(*SearchArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NewsFetcher_ServiceDesc is the grpc.ServiceDesc for NewsFetcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsFetcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fetcher_web.v1.NewsFetcher",
	HandlerType: (*NewsFetcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListArticles",
			Handler:    _NewsFetcher_ListArticles_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _NewsFetcher_GetArticle_Handler,
		},
		{
			MethodName: "SearchArticles",
			Handler:    _NewsFetcher_SearchArticles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/fetcher_web/v1/fetcher_web.proto",
}
